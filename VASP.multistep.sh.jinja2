#!/bin/bash
{% if queue_type == "slurm" %}#SBATCH -J {{ name }}
#SBATCH --time={{ time }}:00:00
#SBATCH -N {{ nodes }}
#SBATCH --ntasks-per-node {{ ppn }}
#SBATCH -o {{ name }}-%j.out
#SBATCH -e {{ name }}-%j.err
#SBATCH --qos {{ queue }}
#SBATCH --mem={{ mem }}
{% if nodes == 1 and computer == "janus"%}#SBATCH --reservation=janus-serial {% endif %}

{% elif queue_type == "pbs" %}#PBS -j eo
#PBS -l nodes={{ nodes }}:ppn={{ ppn }}{% if computer == "psiops" %}:{{ queue }}{% endif %}
#PBS -l walltime={{ time }}:00:00
#PBS -q {% if computer == "psiops" %}batch{% else %}{{ queue }}{% endif %}
#PBS -N {{ name }}
{% if computer == "peregrine" %}#PBS -A {{ account }}{% endif %}
cd $PBS_O_WORKDIR
echo $PBS_O_WORKDIR
{% endif %}


# Set Environment

source ~/.bashrc_vasp
export OMP_NUM_THREADS={{ openmp }}


python -c "

from custodian.vasp.jobs import *
from custodian.vasp.handlers import *
from custodian.custodian import *
from Classes_Custodian import *
import Upgrade_Run

jobtype = '{{ jobtype }}'


if jobtype == 'NEB':
    handlers = [WalltimeHandler({{ time }}*60*60, 15*60), NEBNotTerminating('{{ logname }}', 180*60)]
    job = NEBJob
elif jobtype == 'Dimer':
    handlers = [WalltimeHandler({{ time }}*60*60, 15*60), NEBNotTerminating('{{ logname }}', 180*60),
                DimerDivergingHandler(), DimerCheckMins(), NonConvergingErrorHandler(nionic_steps=50, change_algo=True), UnconvergedErrorHandler()]
    job = DimerJob
elif jobtype == 'Standard':
    handlers = [WalltimeHandler({{ time }}*60*60), NonConvergingErrorHandler(nionic_steps=25, change_algo=True), UnconvergedErrorHandler()]
    job = StandardJob


def get_runs(max_steps=100):
    for i in xrange(max_steps):
        vinput = VaspInput.from_directory('.')
        stages = Upgrade_Run.parse_incar_update('{{ CONVERGENCE }}')
        if i == 0:
            settings = Upgrade_Run.parse_stage_update(stages[vinput['INCAR']['STAGE_NUMBER']], vinput('INCAR'))
        else:
            stage_number = vinput['INCAR']['STAGE_NUMBER'] + 1
            if stage_number >= len(stages):
                break
            settings = Upgrade_Run.parse_stage_update(stages[stage_number])
            settings.append({'file': 'CONTCAR',
                              'action': {'_file_copy': {'dest': 'POSCAR'}}})
        yield job(['{{ mpi }}', '-np', '{{ tasks }}', '{{ vasp_kpts }}'], '{{ logname }}', auto_npar=False, settings_override=settings)


c = Custodian(handlers, get_runs(), max_errors=10)
c.run()"
