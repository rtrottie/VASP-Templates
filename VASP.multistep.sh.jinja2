#!/bin/bash
{% if queue_type == "slurm" %}#SBATCH -J {{ name }}
#SBATCH --time={{ time }}:00:00
#SBATCH -N {{ nodes }}
#SBATCH --ntasks-per-node {{ ppn }}
#SBATCH -o {{ name }}-%j.out
#SBATCH -e {{ name }}-%j.err
#SBATCH --qos {{ queue }}
#SBATCH --mem={{ mem }}
{% if nodes == 1 and computer == "janus"%}#SBATCH --reservation=janus-serial {% endif %}

{% elif queue_type == "pbs" %}#PBS -j eo
#PBS -l nodes={{ nodes }}:ppn={{ ppn }}{% if computer == "psiops" %}:{{ queue }}{% endif %}
#PBS -l walltime={{ time }}:00:00
#PBS -q {% if computer == "psiops" %}batch{% else %}{{ queue }}{% endif %}
#PBS -N {{ name }}
{% if computer == "peregrine" %}#PBS -A {{ account }}{% endif %}
cd $PBS_O_WORKDIR
echo $PBS_O_WORKDIR
{% endif %}


# Set Environment

source ~/.bashrc_vasp
export OMP_NUM_THREADS={{ openmp }}


python -c "

from custodian.vasp.jobs import *
from custodian.vasp.handlers import *
from custodian.custodian import *
from Classes_Custodian import *
import Upgrade_Run
import logging

FORMAT = '%(asctime)s %(message)s'
logging.basicConfig(format=FORMAT, level=logging.INFO, filename='run.log')
jobtype = '{{ jobtype }}'
vasp_kpts = '{{ vasp_kpts }}'
vasp_gamma =  '{{ vasp_gamma }}'


if jobtype == 'NEB':
    handlers = [WalltimeHandler({{ time }}*60*60, 15*60), NEBNotTerminating('{{ logname }}', 180*60)]
    job = NEBJob
elif jobtype == 'Dimer':
    handlers = [WalltimeHandler({{ time }}*60*60, 15*60), NEBNotTerminating('{{ logname }}', 180*60),
                DimerDivergingHandler(), DimerCheckMins(), UnconvergedErrorHandler()]
    job = DimerJob
elif jobtype == 'Standard':
    handlers = [WalltimeHandler({{ time }}*60*60), UnconvergedErrorHandler()]
    job = StandardJob


def get_runs(max_steps=100):
    for i in xrange(max_steps):
        vinput = VaspInput.from_directory('.')
        stages = Upgrade_Run.parse_incar_update('{{ CONVERGENCE }}')
        stage_number = vinput['INCAR']['STAGE_NUMBER'] + 1
        if i == 0:
            settings = Upgrade_Run.parse_stage_update(stages[vinput['INCAR']['STAGE_NUMBER']], vinput['INCAR'])
        else:
            if stage_number >= len(stages):
                break
            settings = Upgrade_Run.parse_stage_update(stages[stage_number], vinput['INCAR'])
            settings.append({'file': 'CONTCAR',
                              'action': {'_file_copy': {'dest': 'POSCAR'}}})
        if stage_number == len(stages) -1:
            final = True
        else:
            final = False
        if 'AUTO_GAMMA' in vinput['INCAR'] and vinput['INCAR']['AUTO_GAMMA']:
            vasp = vasp_gamma
        else:
            vasp = vasp_kpts
        yield job(['{{ mpi }}', '-np', '{{ tasks }}', vasp], '{{ logname }}', auto_npar=False, settings_override=settings, final=final)


c = Custodian(handlers, get_runs(), max_errors=10)
c.run()"
