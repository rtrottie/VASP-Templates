#!/bin/bash
{% if queue_type == "slurm" %}#SBATCH -J {{ name }}
#SBATCH --time={{ time }}:00:00
#SBATCH -N {{ nodes }}
#SBATCH --ntasks-per-node {{ ppn }}
#SBATCH -o {{ name }}-%j.out
#SBATCH -e {{ name }}-%j.err
#SBATCH --qos {{ queue }}
#SBATCH --mem={{ mem }}
{% if nodes == 1 and computer == "janus"%}#SBATCH --reservation=janus-serial {% endif %}

{% elif queue_type == "pbs" %}#PBS -j eo
#PBS -l nodes={{ nodes }}:ppn={{ ppn }}{% if computer == "psiops" %}:{{ queue }}{% endif %}
#PBS -l walltime={{ time }}:00:00
#PBS -q {% if computer == "psiops" %}batch{% else %}{{ queue }}{% endif %}
#PBS -N {{ name }}
{% if computer == "peregrine" %}#PBS -A {{ account }}{% endif %}
cd $PBS_O_WORKDIR
echo $PBS_O_WORKDIR
{% endif %}


# Set Environment

source ~/.bashrc_vasp
export OMP_NUM_THREADS={{ openmp }}


python -c "

from custodian.vasp.jobs import *
from custodian.vasp.handlers import *
from custodian.custodian import *
from Classes_Custodian import *
import Upgrade_Run
import logging

FORMAT = '%(asctime)s %(message)s'
logging.basicConfig(format=FORMAT, level=logging.INFO, filename='run.log')

target = {{ target }}
jobtype = '{{ jobtype }}'

if jobtype == 'Standard':
    handlers = [WalltimeHandler({{ time }}*60*60), UnconvergedErrorHandler()]
    job = StandardJob
else:
    raise Exception('Must be STandard VASP run')


def get_runs(vasp_command, target=1e-3, max_steps=10, mode='linear'):
    energy = 0
    vinput = VaspInput.from_directory('.')
    kpoints = vinput['KPOINTS'].kpts[0]
    for i in xrange(max_steps):
        if mode == 'linear':
            m = [k * (i + 1) for k in kpoints]
        else:
            m = [k + 1 for k in kpoints]
        if i == 0:
            settings = None
            backup = True
        else:
            backup = False
            v = Vasprun('vasprun.xml')
            e_per_atom = v.final_energy / len(v.final_structure)
            ediff = abs(e_per_atom - energy)
            if ediff < target:
                logging.info('Converged to {} eV/atom!'.format(ediff))
                break
            else:
                energy = e_per_atom
                settings = [
                    {'dict': 'INCAR',
                     'action': {'_set': {'ISTART': 1}}},
                    {'dict': 'KPOINTS',
                     'action': {'_set': {'kpoints': [m]}}},
                    {'filename': 'CONTCAR',
                     'action': {'_file_copy': {'dest': 'POSCAR'}}}]
        yield job(vasp_command, final=False, backup=backup,
                      suffix='.kpoints.{}'.format('x'.join(map(str, m))),
                      settings_override=settings)



c = Custodian(handlers, get_runs(), max_errors=10)
c.run()"
