#!/usr/bin/env bash
{% if queue_type == "slurm" %}#SBATCH -J {{ name }}
#SBATCH --time={{ time }}:00:00
#SBATCH -o {{ name }}-.o%j
#SBATCH -e {{ name }}-.e%j
#SBATCH --tasks {{ tasks }}
#SBATCH --nodes {{ nodes }}
#SBATCH --ntasks-per-node {{ ppn }}
{% if computer == "summit" %}#SBATCH --qos {{ queue }}
#SBATCH -N {{ nodes }} {% endif %}
#SBATCH --mem={{ mem }}
#SBATCH --account={{ account }}
{% if nodes == 1 and computer == "janus"%}#SBATCH --reservation=janus-serial {% endif %}

{% elif queue_type == "pbs" %}#PBS -j eo
#PBS -l nodes={{ nodes }}:ppn={{ ppn }}{% if computer == "psiops" %}:{{ queue }}{% endif %}
#PBS -l walltime={{ time }}:00:00
#PBS -q {% if computer == "psiops" %}batch{% else %}{{ queue }}{% endif %}
#PBS -N {{ name }}
{% if computer == "peregrine" %}#PBS -A {{ account }}{% endif %}
cd $PBS_O_WORKDIR
echo $PBS_O_WORKDIR
{% endif %}


# Set Environment

source ~/.bashrc_vasp
export OMP_NUM_THREADS={{ openmp }}


python -c "

from custodian.vasp.jobs import *
from custodian.vasp.handlers import *
from Classes_Custodian import *
import logging
from algorithms import get_energy, get_ts
import os
from Helpers import isint

FORMAT = '%(asctime)s %(message)s'
logging.basicConfig(format=FORMAT, level=logging.INFO, filename='run.log')

target = {{ target }}
jobtype = '{{ jobtype }}'

if jobtype == 'Standard':
    pass
else:
    raise Exception('Must be STandard VASP run')


# if os.path.exists('POSCAR.1') and os.path.exists('POSCAR.2'):
#     s1 = Poscar.from_file('POSCAR.1').structure
#     s2 = Poscar.from_file('POSCAR.2').structure
#     pathway=nebmake('.', s1, s2, 1000, write=False)
# else:
#     raise Exception('Need POSCAR.1 and POSCAR.2')

cwd = os.path.abspath('.')


pathway = 9999
ts = get_ts(0, int(pathway/2) , pathway, target)
logging.info('TS Index : {}\nTS Energy : {}'.format(ts, Structure.from_file(os.path.join(str(ts).zfill(4), 'POSCAR'))))

from ase.io import read, write
dirs = [ x for x in os.listdir('.') if isint(x) ]
dirs.sort()
atoms = [ read(os.path.join(x, 'POSCAR')) for x in dirs ]
write('path.xyz', atoms)

"
