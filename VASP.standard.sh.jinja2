#!/bin/bash
{% if queue_type == "slurm" %}#SBATCH -J {{ name }}
#SBATCH --time={{ time }}:00:00
#SBATCH -N {{ nodes }}
#SBATCH --ntasks-per-node {{ cores }}
#SBATCH -o {{ name }}-%j.out
#SBATCH -e {{ name }}-%j.err
#SBATCH --qos {{ queue }}
#SBATCH --mem={{ mem }}
{% if nodes == 1 and computer == "janus"%}#SBATCH --reservation=janus-serial {% endif %}

{% elif queue_type == "pbs" %}#PBS -j eo
#PBS -l nodes={{ nodes }}:ppn={{ cores }}{% if computer == "psiops" %}{% if nodes == 1 %}:gb{% else %}:ib{% endif %}{% endif %}
#PBS -l walltime={{ time }}:00:00
#PBS -q {{ queue }}
#PBS -N {{ name }}

cd $PBS_O_WORKDIR
{% if computer == "peregrine" %}#PBS -A {{ account }}{% endif %}
{% endif %}


{% if computer == "janus" %}
# Load Modules

module load python/anaconda-2.1.0
module load intel/impi-15.0.1
export OMP_NUM_THREADS=1
echo $SLURM_JOB_NODELIST

{% elif computer == "peregrine" or computer == "psiops" %}
# Set Environment

source ~/.bashrc_vasp


{% else %}

LD_LIBRARY_PATH=$VASP_LD_LIBRARY_PATH
export LD_LIBRARY_PATH
PATH=$VASP_PATH
export PATH

{% endif %}

export OMP_NUM_THREADS=1


python -c "

from custodian.vasp.jobs import *
from custodian.vasp.handlers import *
from custodian.custodian import *
from Classes_Custodian import *

vaspjob = [{{ jobtype }}Job(['{{ mpi }}', '-np', '{{ tasks }}', '{{ vasp_kpts }}'], '{{ logname }}',
                            gamma_vasp_cmd=['{{ mpi }}', '-np', '{{ tasks }}', '{{ vasp_gamma }}'], auto_npar=False, auto_gamma={{ auto_gamma }})]

{% if jobtype == "NEB" %}
handlers = [WalltimeHandler({{ time }}*60*60, 15*60), NEBNotTerminating('{{ logname }}', 180*60)]

{% elif jobtype == "Dimer" %}
handlers = [WalltimeHandler({{ time }}*60*60, 15*60), NEBNotTerminating('{{ logname }}', 180*60),
            DimerDivergingHandler(), DimerCheckMins()]

{% elif jobtype == "Standard" %}
handlers = [WalltimeHandler({{ time }}*60*60), NonConvergingErrorHandler(nionic_steps=50)]
{% endif %}

c = Custodian(handlers, vaspjob, max_errors=1)
c.run()"
