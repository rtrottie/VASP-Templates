#!/bin/bash
{% if queue_type == "slurm" %}#SBATCH -J {{ name }}
#SBATCH --time={{ time }}:00:00
#SBATCH -o {{ name }}-.o%j
#SBATCH -e {{ name }}-.e%j
#SBATCH --tasks {{ tasks }}
#SBATCH --nodes {{ nodes }}
#SBATCH --mem={{ mem }}
#SBATCH --ntasks-per-node {{ ppn }}
#SBATCH --account={{ account }}
{% if computer == "summit"%}#SBATCH --qos {{ queue }}
#SBATCH -N {{ nodes }} {% endif %}
{% if nodes == 1 and computer == "janus"%}#SBATCH --reservation=janus-serial {% endif %}

{% elif queue_type == "pbs" %}#PBS -j eo
#PBS -l nodes={{ nodes }}:ppn={{ ppn }}{% if computer == "psiops" %}:{{ queue }}{% endif %}
#PBS -l walltime={{ time }}:00:00
#PBS -q {% if computer == "psiops" %}batch{% else %}{{ queue }}{% endif %}
#PBS -N {{ name }}
{% if computer == "peregrine" %}#PBS -A {{ account }}{% endif %}
cd $PBS_O_WORKDIR
echo $PBS_O_WORKDIR
{% endif %}


# Set Environment

source {{ vasp_bashrc }}
export OMP_NUM_THREADS={{ openmp }}


python -c "

from custodian.vasp.jobs import *
from custodian.vasp.handlers import *
from custodian.custodian import *
from Classes_Custodian import *
from Classes_Pymatgen import *

FORMAT = '%(asctime)s %(message)s'
logging.basicConfig(format=FORMAT, level=logging.INFO, filename='run.log')
incar = Incar.from_file('INCAR')

if 'AUTO_GAMMA' in incar and incar['AUTO_GAMMA']:
    vasp = '{{ vasp_gamma }}'
else:
    vasp = '{{ vasp_kpts }}'

{% if jobtype == "NEB" %}
handlers = [WalltimeHandler({{ time }}*60*60, min(30*60, {{ time }}*60*60/20), electronic_step_stop=True)]
vaspjob = [NEBJob(['{{ mpi }}', '-np', '{{ tasks }}', vasp], '{{ logname }}', auto_npar=False, backup=False)]

{% elif jobtype == "Dimer" %}
handlers = [WalltimeHandler({{ time }}*60*60, min(30*60, {{ time }}*60*60/20), electronic_step_stop=True),
            DimerDivergingHandler(), DimerCheckMins()]
vaspjob = [DimerJob(['{{ mpi }}', '-np', '{{ tasks }}', vasp], '{{ logname }}', auto_npar=False, backup=False)]

{% elif jobtype == "Dimer-Halting" %}
def jobs(max_steps=2000):
    incar = Incar.from_file('INCAR')
    for i in range(max_steps):
        try:
            v = Vasprun('vasprun.xml')
            if i > 0 and v.converged_ionic:
                break
        except:
            pass
        if os.path.getsize('CENTCAR') > 0:
            shutil.copy('CENTCAR', 'POSCAR')
        if os.path.getsize('NEWMODECAR') > 1:
            shutil.copy('NEWMODECAR', 'MODECAR')
        yield DimerJob(['{{ mpi }}', '-np', '{{ tasks }}', vasp], '{{ logname }}', auto_npar=False, backup=False)
handlers = [WalltimeHandler({{ time }}*60*60, min(30*60, {{ time }}*60*60/20), electronic_step_stop=True),
            FrozenJobErrorHandler_dimer('{{ logname }}', 300)]
vaspjob = jobs()

{% elif jobtype == "Standard-Halting" %}


def jobs(max_steps=2000):
    incar = Incar.from_file('INCAR')
    for i in range(max_steps):
        try:
            v = Vasprun('vasprun.xml')
            if i > 0 and v.converged_ionic:
                break
        except:
            pass
        if os.path.getsize('CONTCAR') > 0:
            shutil.copy('CONTCAR', 'POSCAR')
        yield StandardJob(['{{ mpi }}', '-np', '{{ tasks }}', vasp], '{{ logname }}', auto_npar=False, backup=False)
handlers = [WalltimeHandler({{ time }}*60*60, min(30*60, {{ time }}*60*60/20), electronic_step_stop=True),
            FrozenJobErrorHandler_cont('{{ logname }}', 300)]
vaspjob = jobs()

{% elif jobtype == "Standard" or jobtype%}
handlers = [WalltimeHandler({{ time }}*60*60, min(30*60, {{ time }}*60*60/20), electronic_step_stop=True), NonConvergingErrorHandler_toDamped(nionic_steps=10, change_algo=True)]
vaspjob = [StandardJob(['{{ mpi }}', '-np', '{{ tasks }}', vasp], '{{ logname }}', auto_npar=False, backup=False)]

{% endif %}


c = Custodian(handlers, vaspjob, max_errors=200)
c.run()"
