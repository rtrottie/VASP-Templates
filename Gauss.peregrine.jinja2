{% elif queue_type == "pbs" %}#PBS -j eo
#PBS -l nodes={{ nodes }}:ppn={{ ppn }}{% if computer == "psiops" %}:{{ queue }}{% endif %}
#PBS -l walltime={{ time }}:00:00
#PBS -q {% if computer == "psiops" %}batch{% else %}{{ queue }}{% endif %}
#PBS -N {{ name }}
{% if computer == "peregrine" %}#PBS -A {{ account }}{% endif %}

# Ensure script location
if test -n "$PBS_O_WORKDIR"
then
   echo "PBS workdir set, so cd'ing --> $PBS_O_WORKDIR"
   cd $PBS_O_WORKDIR
fi

# Load Gaussian module to set environment
module purge
module load python/2.7.8
module load gaussian

# Set script variables
INPUT_BASENAME="{{ name }}"
INPUT_FILE=$INPUT_BASENAME.gjf
GAUSSIAN_EXEC=g09
MEMSIZE=3GB
SCRATCH=/scratch/$USER/gaussianScratch/$PBS_JOBID
SCRATCH2=/dev/shm
#
# Check on editing input file. If scratch directories
# are listed then file is used un-changed, if 3-line
# header not present, then script prepends these lines
# to the input file to be used in execution line
#
NUMRWFLINES=`grep "RWF" $INPUT_FILE |wc -l`
if [ $NUMRWFLINES -eq 1 ]; then
   echo "standard file found"
   cp $INPUT_FILE infile
else
   echo "prepending lines to input file"
   echo "%RWF=$SCRATCH2/,$MEMSIZE,$SCRATCH/,-1" > infile
   echo "%NoSave" >> infile
   echo "%Chk=test.chk"  >> infile
   echo " "  >> infile
   cat $INPUT_FILE >> infile
fi

#
# Run gaussian Peregrine script (performs much of the Gaussian setup)
g09_peregrine

#
# Set required Gaussian environment variables
#
if [ $PBS_NUM_NODES -gt 1 ]
then
   export GAUSS_LFLAGS='-vv -opt "Tsnet.Node.lindarsharg: ssh"'
   export GAUSS_EXEDIR=$g09root/g09/linda-exe:$GAUSS_EXEDIR
fi
export GAUSS_SCRDIR=$SCRATCH2
#
# Gaussian needs scratch directories
# Note: sometimes files may have been left behind in
# on-node memory by other jobs that terminated incorrectly
# so clean these to make sure there is enough space.
#
if [ -d $SCRATCH ]
then
   rm -rf $SCRATCH
fi
mkdir $SCRATCH
rm -rf $SCRATCH2/*

# Run Gaussian job
$GAUSSIAN_EXEC < infile >& $INPUT_BASENAME.log
#rm infile
